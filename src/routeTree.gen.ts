/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as PlaylistImport } from './routes/playlist'
import { Route as MoviesImport } from './routes/movies'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as MoviesAllImport } from './routes/movies/all'
import { Route as MoviesWatchMovieNameImport } from './routes/movies/watch.$movieName'
import { Route as MoviesGenreGenreIdImport } from './routes/movies/genre.$genreId'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistRoute = PlaylistImport.update({
  path: '/playlist',
  getParentRoute: () => rootRoute,
} as any)

const MoviesRoute = MoviesImport.update({
  path: '/movies',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MoviesAllRoute = MoviesAllImport.update({
  path: '/all',
  getParentRoute: () => MoviesRoute,
} as any)

const MoviesWatchMovieNameRoute = MoviesWatchMovieNameImport.update({
  path: '/watch/$movieName',
  getParentRoute: () => MoviesRoute,
} as any)

const MoviesGenreGenreIdRoute = MoviesGenreGenreIdImport.update({
  path: '/genre/$genreId',
  getParentRoute: () => MoviesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesImport
      parentRoute: typeof rootRoute
    }
    '/playlist': {
      id: '/playlist'
      path: '/playlist'
      fullPath: '/playlist'
      preLoaderRoute: typeof PlaylistImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/movies/all': {
      id: '/movies/all'
      path: '/all'
      fullPath: '/movies/all'
      preLoaderRoute: typeof MoviesAllImport
      parentRoute: typeof MoviesImport
    }
    '/movies/genre/$genreId': {
      id: '/movies/genre/$genreId'
      path: '/genre/$genreId'
      fullPath: '/movies/genre/$genreId'
      preLoaderRoute: typeof MoviesGenreGenreIdImport
      parentRoute: typeof MoviesImport
    }
    '/movies/watch/$movieName': {
      id: '/movies/watch/$movieName'
      path: '/watch/$movieName'
      fullPath: '/movies/watch/$movieName'
      preLoaderRoute: typeof MoviesWatchMovieNameImport
      parentRoute: typeof MoviesImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AboutRoute,
  MoviesRoute: MoviesRoute.addChildren({
    MoviesAllRoute,
    MoviesGenreGenreIdRoute,
    MoviesWatchMovieNameRoute,
  }),
  PlaylistRoute,
  SearchRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/movies",
        "/playlist",
        "/search"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/movies": {
      "filePath": "movies.tsx",
      "children": [
        "/movies/all",
        "/movies/genre/$genreId",
        "/movies/watch/$movieName"
      ]
    },
    "/playlist": {
      "filePath": "playlist.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/movies/all": {
      "filePath": "movies/all.tsx",
      "parent": "/movies"
    },
    "/movies/genre/$genreId": {
      "filePath": "movies/genre.$genreId.tsx",
      "parent": "/movies"
    },
    "/movies/watch/$movieName": {
      "filePath": "movies/watch.$movieName.tsx",
      "parent": "/movies"
    }
  }
}
ROUTE_MANIFEST_END */
